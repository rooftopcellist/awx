---
- name: Check for existing Postgres data
  stat:
    path: "{{ postgres_data_dir }}/10/data/PG_VERSION"
  register: pg_version_file

- name: Record Postgres version
  set_fact:
    old_pg_version: "{{ lookup('file', postgres_data_dir + '/10/data/PG_VERSION') }}"
  when: pg_version_file.stat.exists

- name: Determine whether to upgrade postgres
  set_fact:
    upgrade_postgres: "{{ old_pg_version is defined and old_pg_version == '10' }}"

- name: Set up new postgres paths pre-upgrade
  file:
    state: directory
    path: "{{ item }}"
    recurse: true
  when: upgrade_postgres | bool
  with_items:
    - "{{ postgres_data_dir }}/10/data"

- name: Stop AWX before upgrading postgres
  docker_service:
    project_src: "{{ docker_compose_dir }}"
    stopped: true
  when: upgrade_postgres | bool

- name: Upgrade Postgres
  shell: |
    docker run --rm \
      -v {{ postgres_data_dir }}/10/data:/var/lib/postgresql/10/data \
      -v {{ postgres_data_dir }}/12/data:/var/lib/postgresql/12/data \
      -e PGUSER={{ pg_username }} -e POSTGRES_INITDB_ARGS="-U {{ pg_username }}" \
      tianon/postgres-upgrade:10-to-12 --username={{ pg_username }}
  when: upgrade_postgres | bool

- name: Copy old pg_hba.conf
  copy:
    src: "{{ postgres_data_dir + '/pgdata/pg_hba.conf' }}"
    dest: "{{ postgres_data_dir + '/12/data/' }}"
  when: upgrade_postgres | bool

- name: Register full path to postgres data dir
  shell: "echo {{ postgres_data_dir }}"
  register: fq_postgres_data_dir

- name: Register temporary docker container
  set_fact: 
    container_command: "docker run -v '{{ fq_postgres_data_dir.stdout }}:/var/lib/postgresql' centos:8 bash "

- name: Remove old data directory
  shell: "{{ container_command }} rm -rf /var/lib/postgresql/10/data"
  when: compose_start_containers|bool
